- name: set ubuntu mirror
  when: ubuntu_mirror is defined
  replace:
    path: /etc/apt/sources.list
    regexp: "http://archive.ubuntu.com/ubuntu"
    replace: "{{ ubuntu_mirror }}"
  notify:
    - update apt cache
    
# installs the packages defined for the whole group and for the particular host as well
- name: install packages (group)
  when: group_packages is defined
  apt:
    state: present
    name: "{{ group_packages }}"
    update_cache: yes
    
- name: install packages (host)
  when: host_packages is defined
  apt:
    state: present
    name: "{{ host_packages }}"
    update_cache: yes

- name: add passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%adm\s'
    line: '%adm ALL=(ALL) NOPASSWD: ALL'

# configures the SSH server, allows port forwarding and disabled logging in with passwords
- name: setup sshd_config
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^AllowAgentForwarding', line: 'AllowAgentForwarding yes' }
    - { regexp: '^X11Forwarding', line: 'X11Forwarding yes' }
    - { regexp: '^ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
    - { regexp: '^UsePAM', line: 'UsePAM yes' }
    - { regexp: '^StreamLocalBindUnlink', line: 'StreamLocalBindUnlink yes' }
  notify:
    - restart sshd

# users management 
- name: create users
  when: users is defined
  user:
    name: "{{ item.username }}"
    state: present
    uid: "{{ item.uid | default(omit) }}"
    password: "{{ item.password | default(omit) }}"
    shell: "{{ item.shell | default('/bin/bash') }}"
  with_items:
    - "{{ all_users | selectattr('username', 'in', users) | list }}"

- name: set user passwords
  when: (users is defined) and (item.password is defined)
  user:
    name: "{{ item.username }}"
    state: present
    password_lock: no
    password: "{{ item.password }}"
  with_items:
    - "{{ all_users | selectattr('username', 'in', users) | list }}"


- name: add authorization keys
  when: users is defined
  authorized_key:
    user: "{{ item.username }}"
    state: present
    key: "{{ item.ssh_key }}"
  with_items:
    - "{{ all_users | selectattr('username', 'in', users) | list }}"

- name: set administrator rights
  when: users is defined
  user:
    name: "{{ item.username }}"
    groups: adm
    append: yes
  with_items:
    - "{{ all_users | selectattr('username', 'in', users) | selectattr('username', 'in', admin | default([])) | list }}"

- name: set root authorized keys
  when: root_login is defined
  authorized_key:
    user: "root"
    state: present
    key: "{{ item.ssh_key }}"
  with_items:
    "{{ all_users | selectattr('username', 'in', root_login | default([])) | list }}"

# now make sure that anyone who is not admin, but has an account on the server is not in the adm group
# note that this errors during the execution if the user is already not in the group, but we don't care about it 
- name: revoke administrator rights
  when: users is defined
  become: true
  command: "gpasswd -d {{ item.username }} adm"
  ignore_errors: true
  with_items:
    - "{{ (all_users | selectattr('username', 'in', users) | list) | difference(all_users | selectattr('username', 'in', admin | default([])) | list) }}"

- name: remove users
  when: (users is defined) and (remove_invalid_users is defined)
  user:
    name: "{{ item.username }}"
    state: absent
    remove: yes
  with_items:
    - "{{ all_users | difference( all_users | selectattr('username', 'in', users) | list ) }}"

- name: Firewall, policy
  when: firewall is defined
  community.general.ufw:
    state: enabled
    policy: '{{ firewall.policy }}'

- name: Firewall, ensure we are not getting locked out
  when: firewall is defined
  community.general.ufw:
    rule: allow
    proto: tcp
    port: 22
    src: "{{ hostvars['prl-gateway']['ansible_host'] }}"

- name: Firewall, open tcp ports
  when: (firewall is defined) and (firewall.rules is defined)
  community.general.ufw:
    rule: "{{ item.rule | default('allow', true) }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    delete: "{{ item.delete | default('no', true) }}"
  loop: '{{ firewall.rules | default([], true) }}'
